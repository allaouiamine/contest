version: "3.2"
services:
    contest:
        build:
            context: .
            dockerfile: docker/contest/Dockerfile
        command: bash -c "cd /go/src/github.com/linuxboot/contest/cmds/contest/ && go run . -dbURI 'contest:contest@tcp(dbstorage:3306)/contest_integ?parseTime=true' -adminServerAddr 'http://adminserver:8000'"
        ports:
            - 8080:8080
        depends_on:
            mysql:
                condition: service_healthy
            admin-server:
                condition: service_healthy
        networks:
            - net

    mysql:
        environment:
            - MYSQL_RANDOM_ROOT_PASSWORD=true
        build:
            context: .
            dockerfile: docker/mysql/Dockerfile
        ports:
            - 3306:3306
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h127.0.0.1", "-ucontest", "-pcontest"]
            interval: 5s
            timeout: 1s
            retries: 5
        networks:
            net:
                aliases:
                    - dbstorage
    
    admin-server:
        build:
            context: .
            # using the same dockerfile as it copies the whole context repo
            # then we run admin_server from the cmds
            dockerfile: docker/contest/Dockerfile
        command: bash -c "cd /go/src/github.com/linuxboot/contest/cmds/admin_server/ && go run . -port 8000 -dbURI 'mongodb://mongostorage:27017' -contestdbURI 'contest:contest@tcp(dbstorage:3306)/contest_integ?parseTime=true'"
        ports:
            - 8000:8000
        healthcheck:
            test: curl --fail -X GET http://localhost:8000/status || exit 1
            interval: 5s
            timeout: 1s
            retries: 5
        depends_on:
            mysql:
                condition: service_healthy
            mongo:
                condition: service_healthy
        networks:
            net:
                aliases:
                    - adminserver

    mongo:
        build:
            context: .
            dockerfile: docker/mongo/Dockerfile
        command: mongod --port 27017 --quiet --logpath /dev/null
        ports:
            - 27017:27017
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/admin-server-db --quiet
            interval: 5s
            timeout: 1s
            retries: 5
        networks:
            net:
                aliases:
                    - mongostorage

networks:
    net:
